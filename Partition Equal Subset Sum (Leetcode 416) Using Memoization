class Solution {
    public boolean recur(int index , int target , int[] nums , int[][] dp) {
        if(target == 0)
           return true;
        if(index == 0)
           return target == nums[index];
        if(target < 0)
           return false;

        if(dp[index][target] != -1){
            if(dp[index][target] == 1)
              return true;
            else
              return false;
        }

        boolean take = recur(index - 1 , target - nums[index] , nums , dp);
        boolean notTake = recur(index - 1 , target , nums , dp);

        if(take || notTake)
           dp[index][target] = 1;
        else
           dp[index][target] = 0;

        return take || notTake;
    }
    public boolean canPartition(int[] nums) {
        int n = nums.length;
        int sum = 0;
        for(int i = 0; i < n; i++) {
            sum += nums[i];
        }
        
        int target = sum / 2;
        if(sum % 2 == 1)
           return false;
        int dp[][] = new int[n][target + 1];
        for(int arr[] : dp)
            Arrays.fill(arr , -1);

        return recur(n - 1 , target , nums , dp);
    }
}
